close all
clear
clc
tic

%% This code was written by Daniel Plaugher and David Murrugarra 
% Boolean model of pacreatic cancer from papers:

% Modeling the Pancreatic Cancer Microenvironment in Search of Control Targets
% -Daniel Plaugher and David Murrugarra 

% Formal Modeling and Analysis of Pancreatic Cancer Microenvironment
% - Qinsi Wang et al



% Number of inputs
n = 69; % whole system
p = 2; % number of states
c = 0.9*ones(2,n); % normal propensities for SDDS

%%% entire system
varF=load('comb_pcc_varF.txt'); % variable communications per node
nv=load('comb_pcc_nv.txt'); % number of variable communications per node
F = load('comb_pcc_tt.txt'); % truth table function 


%% Inductions and Control
% --- Mutations ~ TP53-64(off)	CDKN2A-56(off)	SMAD4-44(off)	KRAS-43(on)
% F1 = TruthTable_del_n_temp(F,nv,varF,p, 43,1); % regulates KRASp
% F2 = TruthTable_del_n_temp(F,nv,varF,p, 64,0); % regulates TP53p
% F3 = TruthTable_del_n_temp(F,nv,varF,p, 56,0); % regulates CyclinDp
% F4 = TruthTable_del_n_temp(F,nv,varF,p, 44,0); % regulates SMADp

% --- Node control ~ PI3K(42), PIP3(46), RAF(47), BAX(61),
% F5 = TruthTable_del_n_temp(F3,nv,varF,p, 46,0); % regulates 
% F6 = TruthTable_del_n_temp(F5,nv,varF,p, 47,0); % regulates 
% F7 = TruthTable_del_n_temp(F6,nv,varF,p, 29,0); % regulates ERKS
% F8 = TruthTable_del_n_temp(F7,nv,varF,p, 18,0); % regulates PI3K

% --- Edge control
% F5 = TruthTable_del_a_temp(F4,nv,varF,p,46,51,0); %edge control PIP3p-AKTp
% F6 = TruthTable_del_a_temp(F5,nv,varF,p,47,49,0); %edge control RAFp-MEKp
% F6 = TruthTable_del_a_temp(F5,nv,varF,p,61,66,1); %edge control BAXp-CASPp
% F7 = TruthTable_del_a_temp(F6,nv,varF,p,29,30,0); %edge control ERKs-AP1s
% F8 = TruthTable_del_a_temp(F7,nv,varF,p,18,25,0); %edge control PI3Ks-PIP3s


%% Simulation
nins = 1000; % number of initializations
nsteps=300; % number of steps for SDDS
g=0.01; % noise

[Y,My]=SDDS_simNoise(g,F,varF,nv,p,c,n, nsteps,nins); 
% [Y,My]=SDDS_sim(F,varF,nv,p,c,n, nsteps,nins); % simulation

Ylast=Y(:,end); %  end trajectories for each node -- can interpret as probability of node expression in long term
Phen = [Ylast(33); Ylast(34); Ylast(35); Ylast(36); Ylast(67); Ylast(68); Ylast(69)] %end phenotype readings
%      ('Apops',   'Prols',   'Migs',    'Acts',    'Autp',    'Apop',    'Prop')



%% Graphing 
X = 0:1:nsteps; % time steps
% 
%whole
figure('Name', 'PC Simulation')
% plot(X,Y(33,:),'c',X,Y(34,:),'m',X,Y(35,:),'k',X,Y(36,:),'y',X,Y(67,:),'g',X,Y(68,:),'b', X,Y(69,:),'r','LineWidth',1.5,'MarkerSize',10)
legend('Apops','Prols', 'Migs','Acts', 'Autp','Apop','Prop')

% plot(X,Y(63,:),X,Y(61,:),X,Y(42,:),X,Y(56,:),X,Y(37,:),'LineWidth',1.5,'MarkerSize',10)
% legend('MDM2','BAX', 'PI3K','CycD', 'EGFR')
xlabel('Time Steps')
ylabel('Average Frequencies')
% title('')


%% Finding Approx Stationary Dist. 
% first=10000; % first # steps we want, same # of last
% last=first;
% 
% SDfirst = NaN(first,n);
% SDlast = NaN(last,n);
% for i=1:first
%     SDfirst(i,:) = My{1,1}(i,:); % stores first steps of simulation for SD
%     SDlast(i,:) = My{1,1}(nsteps-i+1,:); %stores last steps of simulation for SD
% end
% 
% [A,~,indexA] = unique(SDfirst,'rows'); % unique rows and their indices for first steps
% [B,~,indexB] = unique(SDlast,'rows'); % unique rows and their indices for last steps
% outA = [A, histcounts(indexA,1:max(indexA)+1)']; % unique rows and their frequencies for first
% outB = [B, histcounts(indexB,1:max(indexB)+1)']; % unique rows and their frequencies for last


%%%------------------------------------------------------------------------
% SDfirst2dec = NaN(1,first);
% SDlast2dec = NaN(1,last);
% for i=1:first % converting from binary to decimal 
%     xfirst =SDfirst(i,:);
%     SDfirst2dec(i) = multistate2dec(xfirst,p,n);
%     
%     xlast =SDlast(i,:);
%     SDlast2dec(i) = multistate2dec(xlast,p,n);
% end

% A = unique(SDfirst2dec); % finds unique states
% B = unique(SDlast2dec);
% FreqSDfirst2dec = [A',histc(SDfirst2dec(:),A)]; % frequencies of unique states
% FreqSDlast2dec = [B',histc(SDlast2dec(:),B)];
% 
% 
% A2mult = NaN(size(A,2),n);
% B2mult = NaN(size(B,2), n);
% for i=1:size(A,2) % converting from decimal to binary
%     A2mult(i,:) = dec2multistate(A(i)-1,p,n);
% end
% for i=1:size(B,2) % converting from decimal to binary
%     B2mult(i,:) = dec2multistate(B(i)-1,p,n);
% end
% 
% outA = [FreqSDfirst2dec NaN(size(A,2),1) A2mult]; % decimal / frequency / binary of approx. dist. for first steps
% outB = [FreqSDlast2dec NaN(size(B,2),1) B2mult]; % decimal / frequency / binary of approx. dist. for last steps

% test=[1 1 0; 0 1 0 ;1 1 0; 0 0 1];

%% Graphing 
% X = 0:1:nsteps; % time steps
% % hold on
% % plot(X,Y,'LineWidth',1.5,'MarkerSize',10) % plots all node expressions 
% 
% % ----for important nodes of entire system---- GRAPHS
% % figure('Name', 'Pancreatic Stellate Cell')
% % plot(X,Y(33,:),'b',X,Y(34,:),'r',X,Y(35,:),'k',X,Y(36,:),'y','LineWidth',1.5,'MarkerSize',10) 
% % legend('Apops','Prols', 'Migs','Acts') % stellate cell legend
% % xlabel('Time Steps')
% % ylabel('Average Frequencies')
% % title('PSC w/ PCC')
% 
% % 
% % figure('Name', 'Pancreatic Cancer Cell')
% % plot(X,Y(67,:),'k',X,Y(68,:),'b', X,Y(69,:),'r','LineWidth',1.5,'MarkerSize',10)
% % legend('Autp','Apop','Prop')
% % xlabel('Time Steps')
% % ylabel('Average Frequencies')
% % title('PCC w/ PSC w/noise')
% 
% %whole
% figure('Name', 'PC Simulation')
% plot(X,Y(33,:),'c',X,Y(34,:),'m',X,Y(35,:),'k',X,Y(36,:),'y',X,Y(67,:),'g',X,Y(68,:),'b', X,Y(69,:),'r','LineWidth',1.5,'MarkerSize',10)
% legend('Apops','Prols', 'Migs','Acts', 'Autp','Apop','Prop')
% xlabel('Time Steps')
% ylabel('Average Frequencies')
% title('Wild w/ Noise')
% 
% 
% % hold off


%% Attractors

% Attrs = load('Wild_Attr.txt'); % wild type Attr
% % %Attrs=load('C-S_Att.txt');
% % 
% Natt=size(Attrs,2); % number of attractors 


% finds non-oscillating entries of SM attractors-- stores in cell
% NonOsc =cell(1,Natt);
% for i=1:Natt 
%     NonOsc{i} = find(SM_attr(:,i)~=-1);
% end
% 
% % locates attractors w/o oscilations 
% fp = zeros(1,Natt);
% for i=1:Natt 
%     if length(NonOsc{1,i})==n
%         fp(i) = i;
%     end
% end
% FP_loc = find(fp~=0); % location of fp's in SM attrs
% NSMFP = size(FP_loc,2); % number of SM fp's





% Pulls attractors from PSC
% SM_attr_sc = NaN(36, Natt); %36 for PSC nodes
% for i=1:36
%     for j=1:Natt 
%         SM_attr_sc(i,j) = SM_attr(i,j); % stores inital terms from SM_attr
%     end
% end

% S=sum(My{1,1})./nsteps; % total frequencies for each gene

% Check if any of the simulations went to attractors
% [FndAttr,AttrFreq]=AttrSearch(nins,n,Natt,My, Attrs);
% ConvAttr = find(AttrFreq~=0); % find the attractors converged to
% size(ConvAttr,2)
% tot = sum(AttrFreq) % finds how many of the initials converge

%% Probabilities

% % indicator locator
% apop = find(SM_attr(end-1,:)==1); % PCC apoptosis on
% prop = find(SM_attr(end,:)==1); % PCC proliferation on
% autp = find(SM_attr(end-2,:)==1);
% 
% apos = find(SM_attr(end-36,:)==1); % PSC apoptosis on
% pros = find(SM_attr(end-35,:)==1); % PSC proliferation on
% migs = find(SM_attr(end-34,:)==1);
% acts = find(SM_attr(end-33,:)==1); % 
% 
% T = sum(AttrFreq); % total attr freq
% 
% % total frequencies of located attractors
% Apop = sum(AttrFreq(apop));
% Prop = sum(AttrFreq(prop));
% Autp = sum(AttrFreq(autp));
% 
% Apos = sum(AttrFreq(apos));
% Pros = sum(AttrFreq(pros));
% Migs = sum(AttrFreq(migs));
% Acts = sum(AttrFreq(acts));
% 
% % probabilities 
% pMig = (Migs)/T; % prob of migrated cells (non-cycle)
% pAct = Acts/T;
% pPCC = (Autp + Prop)/T; % prob of converged live PCC (non-cycle)



%% Initial terms from My

% % stellate cell
% My_sc = NaN(nins, 36); %36 for PSC nodes
% 
% for i=1:nins
%     for j=1:36 
%         My_sc(i,j) = My{i,1}(1,j); % stores inital terms from My
%     end
% end
% 
% % stellate cell no cytokines
% % My_sc = NaN(nins, 28); % 28 for PSC nodes
% % 
% % for i=1:nins
% %     for j=9:36
% %         My_sc(i,j-8) = My{i,1}(1,j); % stores inital terms from My
% %     end
% % end
% 
%     
% %%% ------------------------------ %%%
% 
% % cancer cell
%  CC = NaN(nins, 33); %33 for PCC nodes without cytokines
% for k=1:nins
%     for m=37:69 
%         CC(k,m-36) = My{k,1}(1,m); % stores inital terms from My
%     end
% end
% 
% % cytokines
% Cyt = NaN(nins, 8); % 8 cytokines
% for i=1:nins
%     for j=1:8 
%         Cyt(i,j) = My{i,1}(1,j); % stores inital terms from My
%     end
% end
% 
% My_pc = [Cyt CC];
% % % My_pc = CC; % no cytokines
% 
% toc


